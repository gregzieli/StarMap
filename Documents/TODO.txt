TODO:
 - onNavigated - albo w Navigator restore i cleanup return Task, i w onNavigated robić CallAsync, a w implementacjach restore i cleanup nie, albo zrobić całkiem void, i w implementacjach async void.

 - [LOW PRIORITY] setting: choose dist in ly/pc
 - [LOW PRIORITY] setting: travel velocity
 - [LOW PRIORITY] do travel nie przesyłać samego id, tylko już gotową pozycję (i id, taki interface).
 - [LOW PRIORITY] dodaj jakiś takiś glow effect do starDetail
 

NOTES:
 - rozdzialik o custom views, styles
 - w folderze Controls są i bardzo generyczne kontrolki, i takie zwyczajne template'y, żeby po prostu podzielić jeden xaml w kilka - one za binding context biorą ten, w którym siedzą.
 - Całe te moje Usingi, locki przy bazie danych były naprawdę niepotrzebne - async w ogóle nie jest IDisposable, poza tym strzela po getConnection przy każdym query.
 - urho: scaleNode mnoży scale * parametr. SetScale zwyczajnie ustawia.
 - performance: Task.Run: np. przy mapowaniu gwiazd - https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html

 - chciałem zostawić ConstellationIds w filtrze (tylko do testów), ale Sqlute.net nie radzi sobie 
  ze skompilowaniem najprostrzego query.Where(x => x.ConstellationId.HasValue ? filter.ConstellationsIds.Contains(x.ConstellationId.Value) : true);


 - Słaby jest brak multi-bindingu do labelek - a w standarodwym xamlu jest coś takiego. Jest co prawda te SPANS w formattedString, ale binding tam nie działa.

BIBLIOGRAFIA: 
https://developer.xamarin.com/workbooks/ - Exploring Urho Coordinates
